def extern unsafe puts : (content : char*) -> int;

def unsafe TestFunc : () -> int
{
	return puts(&"2333"[0]);
}

module ModuleBar
{
	def ModuleFunction : (arg : int) -> int
	{
		def arr : int[10] = { 1, 2, 3 };
		for (def i = 0; i < 10; ++i)
		{
			arr[i] += i;
			if (i > 5)
			{
				break;
			}
		}

		def str = "2333";
		unsafe
		{
			def pArrElem = &arr[1];
			*pArrElem += 1;
		}
		return arr[1] + str[2] - '0';
	}
}

def GlobalVariable : int = 5;

class Foo
{
	def this : (arg : int)
	{
		Field = arg;
	}

	def ~this : ()
	{
	}

	def Method : (arg : int) -> float
	{
		return arg + Field;
	}

	def Method2 : () -> void
	{
		def foo : Foo = { 2 };
		foo.Method(foo.Field + Field as int);
	}

	def Field : double = 1.0;
}

def Abs : (arg : int) -> int
{
	return arg > 0 ? arg : -arg;
}

def Fib : (arg : int) -> int
{
	if (arg < 2)
		return 1;
	else
		return Fib(arg - 2) + Fib(arg - 1);
}

def Func1 : (arg : int) -> int
{
	def t : Test = { 1 };
	t.GetContent();

	if (arg < 0)
	{
		return -arg + GlobalVariable;
	}
	else
	{
		return (Interop(arg) as int) * 2;
	}
}

def CleanupTest : () -> int
{
	def _1 : Test = { 1 };

	if (Func1(_1.GetContent()) > 1)
	{
		def _2 : Test = { 2 };
		return _2.GetContent();
	}

	def _3 : Test = { 3 };
	return _3.GetContent();
}

def Gcd : (a : int, b : int) -> int
{
	while (b)
	{
		def t = b;
		b = a % b;
		a = t;
	}

	return a;
}

def extern Interop : (arg : float) -> double;
